{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Infraestrutura por C\u00f3digo - Aplica\u00e7\u00e3o em Python para gerenciar infraestrutura constru\u00edda com Terraform \u00b6 Aluno: Bernardo Cunha Capoferri Curso: Engenharia da Computa\u00e7\u00e3o Semestre: 6 Contato: bernardocc@al.insper.edu.br Ano: 2022 Agradecimentos a Francisco Pinheiro Janela por permitir o uso deste template. Como Operar com o meu programa: \u00b6 Pr\u00e9-requisitos \u00b6 Para come\u00e7ar a operar com o meu programa, sigam o passo a passo de instala\u00e7\u00e3o indicado no readme do meu reposit\u00f3rio no github. Como usar \u00b6 Ao iniciar o programa pela primeira vez, o usu\u00e1rio se depara com a escolha entre a a cria\u00e7\u00e3o de recursos para a infraestrutura, podendo, nesse caminho, criar inst\u00e2ncias, security groups e habilitar a cria\u00e7\u00e3o de um web-server HA (High Availability), Listar os recursos presentes na infraestrutura, onde o usu\u00e1rio pode verificar o estado desta antes de aplic\u00e1-la efetivamente, Apagar os recursos em sua infraestrutura e trocar a regi\u00e3o na qual esta construindo sua infraestrutura. Para facilitar, a \u00e1rvore de navega\u00e7\u00e3o abaixo, pode trazer mais facilidade para o usu\u00e1rio se encontrar pelo programa: \u251c\u2500\u2500 Create new infrastructure \u2502 \u251c\u2500\u2500 Instance \u2502 \u251c\u2500\u2500 Security Group \u2502 \u251c\u2500\u2500 Security Group rule \u2502 \u251c\u2500\u2500 User \u2502 \u251c\u2500\u2500 High-availability web-service \u2502 \u251c\u2500\u2500 Back \u2502 \u251c\u2500\u2500 List infrastructure \u2502 \u251c\u2500\u2500 Instance \u2502 \u251c\u2500\u2500 Security Group \u2502 \u251c\u2500\u2500 User \u2502 \u251c\u2500\u2500 High-availability web-service \u2502 \u251c\u2500\u2500 Change region \u2502 \u251c\u2500\u2500 Back \u2502 \u251c\u2500\u2500 Delete infrastructure \u2502 \u251c\u2500\u2500 Instance \u2502 \u251c\u2500\u2500 Security Group \u2502 \u251c\u2500\u2500 Security Group rule \u2502 \u251c\u2500\u2500 User \u2502 \u251c\u2500\u2500 High-availability web-service \u2502 \u251c\u2500\u2500 Back \u2502 \u251c\u2500\u2500 Change Region \u2502 \u251c\u2500\u2500 Apply \u2502 \u251c\u2500\u2500 Exit Em sua maioria, as instru\u00e7\u00f5es de uso de cada uma das funcionalidades est\u00e1 autocontida no pr\u00f3prio programa, mas existem algumas considera\u00e7\u00f5es que podem ser feitas: Inst\u00e2ncias \u00b6 Ao Criar uma Inst\u00e2ncia, o usu\u00e1rio deve escolher o tipo de inst\u00e2ncia que deseja criar, e o nome da inst\u00e2ncia que deseja criar. O nome da inst\u00e2ncia deve ser \u00fanico, ou seja, n\u00e3o pode haver duas inst\u00e2ncias com o mesmo nome na mesma regi\u00e3o. O usu\u00e1rio tamb\u00e9m tem a op\u00e7\u00e3o de adicionar um Security group anteriormente definido a inst\u00e2ncia, caso contr\u00e1rio um padr\u00e3o ser\u00e1 criado. Security Groups \u00b6 Ao Criar um Security Group, o usu\u00e1rio deve escolher o nome do Security Group que deseja criar. O nome do Security Group deve ser \u00fanico, ou seja, n\u00e3o pode haver dois Security Groups com o mesmo nome na mesma regi\u00e3o. Al\u00e9m disso, poder\u00e1 ser criado quantas regras de Ingress e Egress que o usu\u00e1rio desejar, se atentando somente \u00e0 libera\u00e7\u00e3o de todas as portas para n\u00e3o correr riscos de seguran\u00e7a. S\u00f3 ser\u00e1 poss\u00edvel deletar um Security Group se ele n\u00e3o estiver sendo usado, ou seja, se quiser delet\u00e1-lo, deve remover todas as depend\u00eancias dele nas inst\u00e2ncias da regi\u00e3o. Usu\u00e1rios \u00b6 Ao Criar um Usu\u00e1rio, o usu\u00e1rio deve escolher o nome do Usu\u00e1rio que deseja criar. O nome do Usu\u00e1rio deve ser \u00fanico, ou seja, n\u00e3o pode haver dois Usu\u00e1rios com o mesmo nome na mesma regi\u00e3o. Al\u00e9m disso, a senha aparecer\u00e1 somente na cria\u00e7\u00e3o deste, ent\u00e3o guarde-a em um local seguro antes de continuar. Ao deletar um Usu\u00e1rio, o usu\u00e1rio n\u00e3o poder\u00e1 ser recuperado, e todas as configura\u00e7\u00f5es de pol\u00edticas atreladas tamb\u00e9m ser\u00e3o descartadas, mas as pol\u00edticas em si ainda continuar\u00e3o existindo. Servi\u00e7o web High Availability \u00b6 Warning A implementa\u00e7\u00e3o do servi\u00e7o de alta disponibilidade utilizou o recurso launch_configuration da AWS, que ap\u00f3s o dia 31 de Dezembro de 2022 deixar\u00e1 de ter suporte, em seu lugar deve ser utilizado o recurso launch_template . O servi\u00e7o de alta disponibilidade na web \u00e9 fixo, podendo ser alterado um booleano que define se este ser\u00e1 criado ou n\u00e3o e o par de chaves que ser\u00e1 associado \u00e0s inst\u00e2ncias. Para verificar o funcionamento do sistema de servi\u00e7o na web \u00e9 necess\u00e1rio acessar o DNS do load-balancer que \u00e9 um dos outputs do Terraform, ou a partir do dashboard da AWS. A p\u00e1gina dever\u00e1 conter o ip interno da instancia e um valor de nonce Para verificar a cria\u00e7\u00e3o de uma nova inst\u00e2ncia autom\u00e1tica acesse a inst\u00e2ncia via SSH, usando seu par de chaves e rode o comando: $ ssh ubuntu@<ip da sua inst\u00e2ncia> $ stress --cpu 8 --timeout 300 Espere entre 4-5 minutos e verifique se outra inst\u00e2ncia foi criada. Tutorial do terraform: \u00b6 O que \u00e9 Terraform? \u00b6 O terraform \u00e9 um software de Infrastructure as Code (IaC) cuja a linguagem faz com que a cria\u00e7\u00e3o de infraestrutura em diferente provedores de servi\u00e7os na nuvem como AWS, Azure e mais seja f\u00e1cil, r\u00e1pido e mais importante, replic\u00e1vel. Estrutura do Terraform \u00b6 O Terraform cont\u00e9m no m\u00ednimo um arquivo main.tf, ondem devem ser definido as seguintes configura\u00e7\u00f5es: os provedores dos servi\u00e7os na nuvem A regi\u00e3o na qual a infraestrutura ser\u00e1 construida Recursos \u00b6 Com estes items definidos \u00e9 poss\u00edvel come\u00e7ar a criar sua infraestrutura, para isso o Terraform tem os resources , que efetivamente s\u00e3o as partes dela, como inst\u00e2ncias, grupos de seguran\u00e7a, VPCs etc... Exemplo de um resource de inst\u00e2nica aws: resource \"aws_instance\" \"app_server\" { ami = \"ami-123\" instance_type = \"t2.micro\" associate_public_ip_address = true key_name = \"bernardo\" subnet_id = aws_subnet.subnet_projeto.id vpc_security_group_ids = [ \"example_sec_group\" ] tags = { Name = \"exemplo\" } } Com os recursos, o programador consegue criar elementos fixos, e assim como linguagens de c\u00f3digo tradicional ele permite a cria\u00e7\u00e3o de recursos com vari\u00e1veis o que acaba sendo \u00fatil para criar recursos din\u00e2micamente. Exemplo de um resource de inst\u00e2nica aws com uso de vari\u00e1veis: resource \"aws_instance\" \"app_server\" { ami = var.image_id instance_type = var.host_type associate_public_ip_address = true key_name = \"bernardo\" subnet_id = aws_subnet.subnet_projeto.id vpc_security_group_ids = [ var.sec_group ] tags = { Name = var.image_name } } Vari\u00e1veis \u00b6 Mas ao contr\u00e1rio de linguagens tradicionais, n\u00e3o \u00e9 poss\u00edvel simplesmente declarar vari\u00e1veis, para isso \u00e9 necess\u00e1rio defini-l\u00e1s com o bloco variable na qual o programador pode definir o seu tipo, assim como descri\u00e7\u00e3o e checagem do que foi inserido. Exemplo de um resource de variavel: variable \"image_id\" { description = \"example description\" type = string } As vari\u00e1veis por padr\u00e3o s\u00e3o definidas sem valor padr\u00e3o e como sendo obrigat\u00f3rias, portanto se n\u00e3o forem preenchidas em um arquivo .tfvars , que pode ser definido tanto no formato .json quanto padr\u00e3o do Terraform , ser\u00e1 necess\u00e1rio inseri-las manualmente Exemplo de um arquivo .tfvars.json para defini\u00e7\u00f5es de vari\u00e1veis: { \"image_id\" : \"ami-1234\" } Itera\u00e7\u00e3o \u00b6 O Terraform tamb\u00e9m oferece mecanismos para criar v\u00e1rios recursos a partir de um bloco s\u00f3, nominalmente os construtores count e for_each . O count quando definido cria o n\u00famero especificado de c\u00f3pias de um recurso, ent\u00e3o por exemplo, quando queremos criar 5 inst\u00e2ncias com as mesmas configura\u00e7\u00f5es \u00e9 melhor usar o count . Exemplo de um resource de inst\u00e2nica aws com uso de count : resource \"aws_instance\" \"app_server\" { count = 5 ami = \"ami-1234\" instance_type = \"t2.micro\" associate_public_ip_address = true key_name = \"bernardo\" subnet_id = aws_subnet.subnet_projeto.id vpc_security_group_ids = [ aws_security_group.custom_sec_group[lookup ( var.security_group_vars , each.value.security_group_name , null ). name].id ] tags = { Name = \"instance-${count.index}\" } Se quer maior flexibilidade na cria\u00e7\u00e3o de novos recursos a partir de um mesmo bloco de c\u00f3digo, \u00e9 recomendado o uso do for_each , que quando definido a partir de uma lista ou dicion\u00e1rio cria um objeto chamado each que itera sobre os valores de cada um dos \u00edndicies ou chaves. Exemplo de um resource de inst\u00e2nica aws com uso de for_each : resource \"aws_instance\" \"app_server\" { for_each = var.instance_vars ami = each.value.image_id instance_type = each.value.host_type associate_public_ip_address = true key_name = \"bernardo\" subnet_id = aws_subnet.subnet_projeto.id vpc_security_group_ids = [ aws_security_group.custom_sec_group[lookup ( var.security_group_vars , each.value.security_group_name , null ). name].id ] tags = { Name = each.value.image_name } } Rquisi\u00e7\u00f5es para Providers \u00b6 Caso queira informa\u00e7\u00f5es da plataforma de servi\u00e7o na web para qual est\u00e1 desenvolvendo seu c\u00f3digo, o m\u00f3dulo data ir\u00e1 te auxiliar. Com ele \u00e9 poss\u00edvel requisitar informa\u00e7\u00f5es externas ao seu ambiente local, como as imagens de uma regi\u00e3o espec\u00edfica, ou recursos externos a sua infraestrutura. Exemplo de um m\u00f3dulo data para obter as zonas de disponibilidade de uma regi\u00e3o: data \"aws_availability_zones\" \"available\" { state = \"available\" } Outputs \u00b6 O Terraform tamb\u00e9m permite formatar as respostas de seu programa ap\u00f3s este ter sido aplicado por meio do m\u00f3dulo output , Assim \u00e9 poss\u00edvel imprimir informa\u00e7\u00f5es que voc\u00ea s\u00f3 pode ser capaz de obter ap\u00f3s a cria\u00e7\u00e3o efetiva de um recurso, como por exempo, o ip designado para uma inst\u00e2ncia. Exemplo de um m\u00f3dulo output para lsitar as senhas de acesso dos usu\u00e1rios criados: output \"password\" { description = \"Password of the created users\" value = [ for password in aws_iam_user_login_profile.login_bernardo : password ] } Agora \u00e9 sua vez! \u00b6 Tendo uma ideia de como funcionam e como usar as ferramentas fornecidas pelo Terraform agora voc\u00ea pode come\u00e7ar a criar seu pr\u00f3prio IaC, Vasculhe a documenta\u00e7\u00e3o oficial e os tutoriais oferecidos tanto pela HashiCorp assim como terceiros para desenvolver a aplica\u00e7\u00e3o que deseja!","title":"Home"},{"location":"#infraestrutura-por-codigo-aplicacao-em-python-para-gerenciar-infraestrutura-construida-com-terraform","text":"Aluno: Bernardo Cunha Capoferri Curso: Engenharia da Computa\u00e7\u00e3o Semestre: 6 Contato: bernardocc@al.insper.edu.br Ano: 2022 Agradecimentos a Francisco Pinheiro Janela por permitir o uso deste template.","title":"Infraestrutura por C\u00f3digo - Aplica\u00e7\u00e3o em Python para gerenciar infraestrutura constru\u00edda com Terraform"},{"location":"#como-operar-com-o-meu-programa","text":"","title":"Como Operar com o meu programa:"},{"location":"#pre-requisitos","text":"Para come\u00e7ar a operar com o meu programa, sigam o passo a passo de instala\u00e7\u00e3o indicado no readme do meu reposit\u00f3rio no github.","title":"Pr\u00e9-requisitos"},{"location":"#como-usar","text":"Ao iniciar o programa pela primeira vez, o usu\u00e1rio se depara com a escolha entre a a cria\u00e7\u00e3o de recursos para a infraestrutura, podendo, nesse caminho, criar inst\u00e2ncias, security groups e habilitar a cria\u00e7\u00e3o de um web-server HA (High Availability), Listar os recursos presentes na infraestrutura, onde o usu\u00e1rio pode verificar o estado desta antes de aplic\u00e1-la efetivamente, Apagar os recursos em sua infraestrutura e trocar a regi\u00e3o na qual esta construindo sua infraestrutura. Para facilitar, a \u00e1rvore de navega\u00e7\u00e3o abaixo, pode trazer mais facilidade para o usu\u00e1rio se encontrar pelo programa: \u251c\u2500\u2500 Create new infrastructure \u2502 \u251c\u2500\u2500 Instance \u2502 \u251c\u2500\u2500 Security Group \u2502 \u251c\u2500\u2500 Security Group rule \u2502 \u251c\u2500\u2500 User \u2502 \u251c\u2500\u2500 High-availability web-service \u2502 \u251c\u2500\u2500 Back \u2502 \u251c\u2500\u2500 List infrastructure \u2502 \u251c\u2500\u2500 Instance \u2502 \u251c\u2500\u2500 Security Group \u2502 \u251c\u2500\u2500 User \u2502 \u251c\u2500\u2500 High-availability web-service \u2502 \u251c\u2500\u2500 Change region \u2502 \u251c\u2500\u2500 Back \u2502 \u251c\u2500\u2500 Delete infrastructure \u2502 \u251c\u2500\u2500 Instance \u2502 \u251c\u2500\u2500 Security Group \u2502 \u251c\u2500\u2500 Security Group rule \u2502 \u251c\u2500\u2500 User \u2502 \u251c\u2500\u2500 High-availability web-service \u2502 \u251c\u2500\u2500 Back \u2502 \u251c\u2500\u2500 Change Region \u2502 \u251c\u2500\u2500 Apply \u2502 \u251c\u2500\u2500 Exit Em sua maioria, as instru\u00e7\u00f5es de uso de cada uma das funcionalidades est\u00e1 autocontida no pr\u00f3prio programa, mas existem algumas considera\u00e7\u00f5es que podem ser feitas:","title":"Como usar"},{"location":"#instancias","text":"Ao Criar uma Inst\u00e2ncia, o usu\u00e1rio deve escolher o tipo de inst\u00e2ncia que deseja criar, e o nome da inst\u00e2ncia que deseja criar. O nome da inst\u00e2ncia deve ser \u00fanico, ou seja, n\u00e3o pode haver duas inst\u00e2ncias com o mesmo nome na mesma regi\u00e3o. O usu\u00e1rio tamb\u00e9m tem a op\u00e7\u00e3o de adicionar um Security group anteriormente definido a inst\u00e2ncia, caso contr\u00e1rio um padr\u00e3o ser\u00e1 criado.","title":"Inst\u00e2ncias"},{"location":"#security-groups","text":"Ao Criar um Security Group, o usu\u00e1rio deve escolher o nome do Security Group que deseja criar. O nome do Security Group deve ser \u00fanico, ou seja, n\u00e3o pode haver dois Security Groups com o mesmo nome na mesma regi\u00e3o. Al\u00e9m disso, poder\u00e1 ser criado quantas regras de Ingress e Egress que o usu\u00e1rio desejar, se atentando somente \u00e0 libera\u00e7\u00e3o de todas as portas para n\u00e3o correr riscos de seguran\u00e7a. S\u00f3 ser\u00e1 poss\u00edvel deletar um Security Group se ele n\u00e3o estiver sendo usado, ou seja, se quiser delet\u00e1-lo, deve remover todas as depend\u00eancias dele nas inst\u00e2ncias da regi\u00e3o.","title":"Security Groups"},{"location":"#usuarios","text":"Ao Criar um Usu\u00e1rio, o usu\u00e1rio deve escolher o nome do Usu\u00e1rio que deseja criar. O nome do Usu\u00e1rio deve ser \u00fanico, ou seja, n\u00e3o pode haver dois Usu\u00e1rios com o mesmo nome na mesma regi\u00e3o. Al\u00e9m disso, a senha aparecer\u00e1 somente na cria\u00e7\u00e3o deste, ent\u00e3o guarde-a em um local seguro antes de continuar. Ao deletar um Usu\u00e1rio, o usu\u00e1rio n\u00e3o poder\u00e1 ser recuperado, e todas as configura\u00e7\u00f5es de pol\u00edticas atreladas tamb\u00e9m ser\u00e3o descartadas, mas as pol\u00edticas em si ainda continuar\u00e3o existindo.","title":"Usu\u00e1rios"},{"location":"#servico-web-high-availability","text":"Warning A implementa\u00e7\u00e3o do servi\u00e7o de alta disponibilidade utilizou o recurso launch_configuration da AWS, que ap\u00f3s o dia 31 de Dezembro de 2022 deixar\u00e1 de ter suporte, em seu lugar deve ser utilizado o recurso launch_template . O servi\u00e7o de alta disponibilidade na web \u00e9 fixo, podendo ser alterado um booleano que define se este ser\u00e1 criado ou n\u00e3o e o par de chaves que ser\u00e1 associado \u00e0s inst\u00e2ncias. Para verificar o funcionamento do sistema de servi\u00e7o na web \u00e9 necess\u00e1rio acessar o DNS do load-balancer que \u00e9 um dos outputs do Terraform, ou a partir do dashboard da AWS. A p\u00e1gina dever\u00e1 conter o ip interno da instancia e um valor de nonce Para verificar a cria\u00e7\u00e3o de uma nova inst\u00e2ncia autom\u00e1tica acesse a inst\u00e2ncia via SSH, usando seu par de chaves e rode o comando: $ ssh ubuntu@<ip da sua inst\u00e2ncia> $ stress --cpu 8 --timeout 300 Espere entre 4-5 minutos e verifique se outra inst\u00e2ncia foi criada.","title":"Servi\u00e7o web High Availability"},{"location":"#tutorial-do-terraform","text":"","title":"Tutorial do terraform:"},{"location":"#o-que-e-terraform","text":"O terraform \u00e9 um software de Infrastructure as Code (IaC) cuja a linguagem faz com que a cria\u00e7\u00e3o de infraestrutura em diferente provedores de servi\u00e7os na nuvem como AWS, Azure e mais seja f\u00e1cil, r\u00e1pido e mais importante, replic\u00e1vel.","title":"O que \u00e9 Terraform?"},{"location":"#estrutura-do-terraform","text":"O Terraform cont\u00e9m no m\u00ednimo um arquivo main.tf, ondem devem ser definido as seguintes configura\u00e7\u00f5es: os provedores dos servi\u00e7os na nuvem A regi\u00e3o na qual a infraestrutura ser\u00e1 construida","title":"Estrutura do Terraform"},{"location":"#recursos","text":"Com estes items definidos \u00e9 poss\u00edvel come\u00e7ar a criar sua infraestrutura, para isso o Terraform tem os resources , que efetivamente s\u00e3o as partes dela, como inst\u00e2ncias, grupos de seguran\u00e7a, VPCs etc... Exemplo de um resource de inst\u00e2nica aws: resource \"aws_instance\" \"app_server\" { ami = \"ami-123\" instance_type = \"t2.micro\" associate_public_ip_address = true key_name = \"bernardo\" subnet_id = aws_subnet.subnet_projeto.id vpc_security_group_ids = [ \"example_sec_group\" ] tags = { Name = \"exemplo\" } } Com os recursos, o programador consegue criar elementos fixos, e assim como linguagens de c\u00f3digo tradicional ele permite a cria\u00e7\u00e3o de recursos com vari\u00e1veis o que acaba sendo \u00fatil para criar recursos din\u00e2micamente. Exemplo de um resource de inst\u00e2nica aws com uso de vari\u00e1veis: resource \"aws_instance\" \"app_server\" { ami = var.image_id instance_type = var.host_type associate_public_ip_address = true key_name = \"bernardo\" subnet_id = aws_subnet.subnet_projeto.id vpc_security_group_ids = [ var.sec_group ] tags = { Name = var.image_name } }","title":"Recursos"},{"location":"#variaveis","text":"Mas ao contr\u00e1rio de linguagens tradicionais, n\u00e3o \u00e9 poss\u00edvel simplesmente declarar vari\u00e1veis, para isso \u00e9 necess\u00e1rio defini-l\u00e1s com o bloco variable na qual o programador pode definir o seu tipo, assim como descri\u00e7\u00e3o e checagem do que foi inserido. Exemplo de um resource de variavel: variable \"image_id\" { description = \"example description\" type = string } As vari\u00e1veis por padr\u00e3o s\u00e3o definidas sem valor padr\u00e3o e como sendo obrigat\u00f3rias, portanto se n\u00e3o forem preenchidas em um arquivo .tfvars , que pode ser definido tanto no formato .json quanto padr\u00e3o do Terraform , ser\u00e1 necess\u00e1rio inseri-las manualmente Exemplo de um arquivo .tfvars.json para defini\u00e7\u00f5es de vari\u00e1veis: { \"image_id\" : \"ami-1234\" }","title":"Vari\u00e1veis"},{"location":"#iteracao","text":"O Terraform tamb\u00e9m oferece mecanismos para criar v\u00e1rios recursos a partir de um bloco s\u00f3, nominalmente os construtores count e for_each . O count quando definido cria o n\u00famero especificado de c\u00f3pias de um recurso, ent\u00e3o por exemplo, quando queremos criar 5 inst\u00e2ncias com as mesmas configura\u00e7\u00f5es \u00e9 melhor usar o count . Exemplo de um resource de inst\u00e2nica aws com uso de count : resource \"aws_instance\" \"app_server\" { count = 5 ami = \"ami-1234\" instance_type = \"t2.micro\" associate_public_ip_address = true key_name = \"bernardo\" subnet_id = aws_subnet.subnet_projeto.id vpc_security_group_ids = [ aws_security_group.custom_sec_group[lookup ( var.security_group_vars , each.value.security_group_name , null ). name].id ] tags = { Name = \"instance-${count.index}\" } Se quer maior flexibilidade na cria\u00e7\u00e3o de novos recursos a partir de um mesmo bloco de c\u00f3digo, \u00e9 recomendado o uso do for_each , que quando definido a partir de uma lista ou dicion\u00e1rio cria um objeto chamado each que itera sobre os valores de cada um dos \u00edndicies ou chaves. Exemplo de um resource de inst\u00e2nica aws com uso de for_each : resource \"aws_instance\" \"app_server\" { for_each = var.instance_vars ami = each.value.image_id instance_type = each.value.host_type associate_public_ip_address = true key_name = \"bernardo\" subnet_id = aws_subnet.subnet_projeto.id vpc_security_group_ids = [ aws_security_group.custom_sec_group[lookup ( var.security_group_vars , each.value.security_group_name , null ). name].id ] tags = { Name = each.value.image_name } }","title":"Itera\u00e7\u00e3o"},{"location":"#rquisicoes-para-providers","text":"Caso queira informa\u00e7\u00f5es da plataforma de servi\u00e7o na web para qual est\u00e1 desenvolvendo seu c\u00f3digo, o m\u00f3dulo data ir\u00e1 te auxiliar. Com ele \u00e9 poss\u00edvel requisitar informa\u00e7\u00f5es externas ao seu ambiente local, como as imagens de uma regi\u00e3o espec\u00edfica, ou recursos externos a sua infraestrutura. Exemplo de um m\u00f3dulo data para obter as zonas de disponibilidade de uma regi\u00e3o: data \"aws_availability_zones\" \"available\" { state = \"available\" }","title":"Rquisi\u00e7\u00f5es para Providers"},{"location":"#outputs","text":"O Terraform tamb\u00e9m permite formatar as respostas de seu programa ap\u00f3s este ter sido aplicado por meio do m\u00f3dulo output , Assim \u00e9 poss\u00edvel imprimir informa\u00e7\u00f5es que voc\u00ea s\u00f3 pode ser capaz de obter ap\u00f3s a cria\u00e7\u00e3o efetiva de um recurso, como por exempo, o ip designado para uma inst\u00e2ncia. Exemplo de um m\u00f3dulo output para lsitar as senhas de acesso dos usu\u00e1rios criados: output \"password\" { description = \"Password of the created users\" value = [ for password in aws_iam_user_login_profile.login_bernardo : password ] }","title":"Outputs"},{"location":"#agora-e-sua-vez","text":"Tendo uma ideia de como funcionam e como usar as ferramentas fornecidas pelo Terraform agora voc\u00ea pode come\u00e7ar a criar seu pr\u00f3prio IaC, Vasculhe a documenta\u00e7\u00e3o oficial e os tutoriais oferecidos tanto pela HashiCorp assim como terceiros para desenvolver a aplica\u00e7\u00e3o que deseja!","title":"Agora \u00e9 sua vez!"}]}